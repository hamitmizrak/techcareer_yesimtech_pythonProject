"""
GerÃ§ek Hayatta String Ä°ÅŸlemleri: Sosyal Medya Analizi ve Ã–neri Sistemi
Senaryo: Bir sosyal medya platformu yÃ¶nettiÄŸinizi dÃ¼ÅŸÃ¼nÃ¼n.
KullanÄ±cÄ±lar iÃ§erik (paylaÅŸÄ±m, yorum) oluÅŸturuyor ve bu iÃ§eriklerin analiz edilmesi gerekiyor.
AÅŸaÄŸÄ±da, Python kullanarak bu iÃ§erikler Ã¼zerinde string iÅŸlemleri yaparak bir analiz ve Ã¶neri sistemi geliÅŸtireceÄŸiz.
Bu sistem, kullanÄ±cÄ± etkileÅŸimlerini analiz edecek, metinleri iÅŸleyecek ve ilgi alanlarÄ±na gÃ¶re Ã¶neriler sunacaktÄ±r.
"""


# Ã–rnek sosyal medya iÃ§erikleri
icerikler = [
    {
        "kullanici": "ali123",
        "icerik": "Python programlama dili Ã¶ÄŸreniyorum. Ã‡ok keyifli!",
        "etiketler": ["#Python", "#Programlama", "#EÄŸitim"],
    },
    {
        "kullanici": "ayse456",
        "icerik": "BugÃ¼n spor salonunda harika bir antrenman yaptÄ±m! ğŸ’ª",
        "etiketler": ["#Spor", "#SaÄŸlÄ±k", "#Motivasyon"],
    },
    {
        "kullanici": "mehmet789",
        "icerik": "JavaScript ile web uygulamalarÄ± geliÅŸtirmek Ã§ok eÄŸlenceli.",
        "etiketler": ["#JavaScript", "#WebGeliÅŸtirme", "#Kodlama"],
    },
    {
        "kullanici": "fatma321",
        "icerik": "Python ve veri analizi konularÄ±nda yeni bilgiler Ã¶ÄŸreniyorum.",
        "etiketler": ["#Python", "#VeriAnalizi", "#EÄŸitim"],
    },
    {
        "kullanici": "zeynep654",
        "icerik": "Kahve eÅŸliÄŸinde kitap okumak en sevdiÄŸim ÅŸey. â˜•ğŸ“š",
        "etiketler": ["#Kahve", "#Kitap", "#Huzur"],
    }
]

"""
Kodun Ã–zellikleri
Toplam Ä°Ã§erik SayÄ±sÄ±: Platformdaki iÃ§eriklerin toplamÄ±nÄ± bulur.
KullanÄ±cÄ± Analizi: KullanÄ±cÄ± baÅŸÄ±na iÃ§erik sayÄ±sÄ±nÄ± hesaplar.
Kelime Analizi: Belirli bir kelimenin iÃ§eriklerde ne sÄ±klÄ±kla geÃ§tiÄŸini kontrol eder.
Ä°Ã§erik Ã–zetleme: Uzun iÃ§erikleri kÄ±saltÄ±r.
Etiket Analizi: En popÃ¼ler etiketleri listeler.
Ã–neri Sistemi: KullanÄ±cÄ±larÄ±n ortak etiketlerine gÃ¶re baÄŸlantÄ±lar Ã¶nerir.
Benzersiz Kelimeler: TÃ¼m iÃ§eriklerde geÃ§en kelimeleri analiz eder.
Filtreleme: Belirli bir kullanÄ±cÄ±ya ait iÃ§erikleri filtreler.
"""
# 1. Toplam iÃ§erik sayÄ±sÄ±nÄ± bulma
# 2. KullanÄ±cÄ± baÅŸÄ±na iÃ§erik sayÄ±sÄ±nÄ± hesaplama
# 3. Belirli bir kelimenin iÃ§eriklerde geÃ§iÅŸ sÄ±klÄ±ÄŸÄ±nÄ± bulma
# 4. Ä°Ã§erikleri uzunluklarÄ±na gÃ¶re sÄ±ralama
# 5. En popÃ¼ler etiketleri bulma
# 6. KullanÄ±cÄ± Ã¶neri sistemi (ilgi alanlarÄ±na gÃ¶re)
# KullanÄ±cÄ± Ã¶neri sistemi: AynÄ± etiketi paylaÅŸan kullanÄ±cÄ±larÄ± Ã¶nerme
# 7. Ä°Ã§erik Ã¶zetleri
# 8. Benzersiz kelimeleri bulma
# 9. Belirli bir kullanÄ±cÄ±ya ait iÃ§erikleri filtreleme



# 1. Toplam iÃ§erik sayÄ±sÄ±nÄ± bulma
toplam_icerik = len(icerikler)
print(f"Toplam iÃ§erik sayÄ±sÄ±: {toplam_icerik}")

# 2. KullanÄ±cÄ± baÅŸÄ±na iÃ§erik sayÄ±sÄ±nÄ± hesaplama
kullanici_icerik_sayisi = {}
for icerik in icerikler:
    kullanici = icerik["kullanici"]
    kullanici_icerik_sayisi[kullanici] = kullanici_icerik_sayisi.get(kullanici, 0) + 1

print("\nKullanÄ±cÄ± baÅŸÄ±na iÃ§erik sayÄ±sÄ±:")
for kullanici, sayi in kullanici_icerik_sayisi.items():
    print(f"{kullanici}: {sayi} iÃ§erik")

# 3. Belirli bir kelimenin iÃ§eriklerde geÃ§iÅŸ sÄ±klÄ±ÄŸÄ±nÄ± bulma
aranan_kelime = "Python"
gecis_sayisi = sum(1 for icerik in icerikler if aranan_kelime.lower() in icerik["icerik"].lower())
print(f"\n'{aranan_kelime}' kelimesi {gecis_sayisi} iÃ§erikte geÃ§iyor.")

# 4. Ä°Ã§erikleri uzunluklarÄ±na gÃ¶re sÄ±ralama
print("\nÄ°Ã§erikler uzunluklarÄ±na gÃ¶re sÄ±ralandÄ±:")
icerikler.sort(key=lambda x: len(x["icerik"]))
for icerik in icerikler:
    print(f"{icerik['icerik']} ({len(icerik['icerik'])} karakter)")

# 5. En popÃ¼ler etiketleri bulma
from collections import Counter

tum_etiketler = [etiket for icerik in icerikler for etiket in icerik["etiketler"]]
etiket_sayilari = Counter(tum_etiketler)
en_populer_etiketler = etiket_sayilari.most_common(3)

print("\nEn popÃ¼ler etiketler:")
for etiket, sayi in en_populer_etiketler:
    print(f"{etiket}: {sayi} kez kullanÄ±lmÄ±ÅŸ")

# 6. KullanÄ±cÄ± Ã¶neri sistemi (ilgi alanlarÄ±na gÃ¶re)
kullanici_ilgi_alani = {}
for icerik in icerikler:
    kullanici = icerik["kullanici"]
    etiketler = icerik["etiketler"]
    kullanici_ilgi_alani[kullanici] = kullanici_ilgi_alani.get(kullanici, set()).union(etiketler)

print("\nKullanÄ±cÄ± ilgi alanlarÄ±:")
for kullanici, ilgi_alanlari in kullanici_ilgi_alani.items():
    print(f"{kullanici}: {', '.join(ilgi_alanlari)}")

# KullanÄ±cÄ± Ã¶neri sistemi: AynÄ± etiketi paylaÅŸan kullanÄ±cÄ±larÄ± Ã¶nerme
print("\nKullanÄ±cÄ± Ã¶neri sistemi:")
for kullanici, ilgi_alanlari in kullanici_ilgi_alani.items():
    print(f"{kullanici} iÃ§in Ã¶neriler:")
    ortak_kullanicilar = [
        k
        for k, alanlar in kullanici_ilgi_alani.items()
        if k != kullanici and not ilgi_alanlari.isdisjoint(alanlar)
    ]
    print(f"  Ã–nerilen kullanÄ±cÄ±lar: {', '.join(ortak_kullanicilar)}" if ortak_kullanicilar else "  Ã–neri bulunamadÄ±.")

# 7. Ä°Ã§erik Ã¶zetleri
print("\nÄ°Ã§erik Ã¶zetleri:")
for icerik in icerikler:
    orijinal = icerik["icerik"]
    ozet = orijinal[:50] + "..." if len(orijinal) > 50 else orijinal
    print(f"{icerik['kullanici']} iÃ§erik Ã¶zeti: {ozet}")

# 8. Benzersiz kelimeleri bulma
print("\nTÃ¼m iÃ§eriklerde geÃ§en benzersiz kelimeler:")
tum_kelimeler = set()
for icerik in icerikler:
    kelimeler = icerik["icerik"].split()
    tum_kelimeler.update(kelimeler)

print(f"Benzersiz kelimeler ({len(tum_kelimeler)} adet): {tum_kelimeler}")

# 9. Belirli bir kullanÄ±cÄ±ya ait iÃ§erikleri filtreleme
kullanici_adi = "fatma321"
kullanici_icerikleri = [icerik for icerik in icerikler if icerik["kullanici"] == kullanici_adi]

print(f"\n{kullanici_adi} kullanÄ±cÄ±sÄ±na ait iÃ§erikler:")
for icerik in kullanici_icerikleri:
    print(f"- {icerik['icerik']}")
